// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum PlayerType : int {
  PLAYER_TYPE_NONE = 0,
  PLAYER_TYPE_KNIGHT = 1,
  PLAYER_TYPE_MAGE = 2,
  PLAYER_TYPE_ARCHER = 3,
  PlayerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlayerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PlayerType_IsValid(int value);
constexpr PlayerType PlayerType_MIN = PLAYER_TYPE_NONE;
constexpr PlayerType PlayerType_MAX = PLAYER_TYPE_ARCHER;
constexpr int PlayerType_ARRAYSIZE = PlayerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerType_descriptor();
template<typename T>
inline const std::string& PlayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerType_descriptor(), enum_t_value);
}
inline bool PlayerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerType>(
    PlayerType_descriptor(), name, value);
}
enum OBJECT_TYPE : int {
  OBJECT_TYPE_NONE = 0,
  OBJECT_TYPE_PLAYER = 1,
  OBJECT_TYPE_PLAYER_MISSILE = 2,
  OBJECT_TYPE_PLAYER_BOMB = 3,
  OBJECT_TYPE_ENEMY = 4,
  OBJECT_TYPE_ENEMY_MISSILE = 5,
  OBJECT_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OBJECT_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OBJECT_TYPE_IsValid(int value);
constexpr OBJECT_TYPE OBJECT_TYPE_MIN = OBJECT_TYPE_NONE;
constexpr OBJECT_TYPE OBJECT_TYPE_MAX = OBJECT_TYPE_ENEMY_MISSILE;
constexpr int OBJECT_TYPE_ARRAYSIZE = OBJECT_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OBJECT_TYPE_descriptor();
template<typename T>
inline const std::string& OBJECT_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OBJECT_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OBJECT_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OBJECT_TYPE_descriptor(), enum_t_value);
}
inline bool OBJECT_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OBJECT_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OBJECT_TYPE>(
    OBJECT_TYPE_descriptor(), name, value);
}
enum PLAYER_DIR_TYPE : int {
  PLAYER_DIR_TYPE_IDLE = 0,
  PLAYER_DIR_TYPE_LEFT = 1,
  PLAYER_DIR_TYPE_RIGHT = 2,
  PLAYER_DIR_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PLAYER_DIR_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PLAYER_DIR_TYPE_IsValid(int value);
constexpr PLAYER_DIR_TYPE PLAYER_DIR_TYPE_MIN = PLAYER_DIR_TYPE_IDLE;
constexpr PLAYER_DIR_TYPE PLAYER_DIR_TYPE_MAX = PLAYER_DIR_TYPE_RIGHT;
constexpr int PLAYER_DIR_TYPE_ARRAYSIZE = PLAYER_DIR_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PLAYER_DIR_TYPE_descriptor();
template<typename T>
inline const std::string& PLAYER_DIR_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PLAYER_DIR_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PLAYER_DIR_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PLAYER_DIR_TYPE_descriptor(), enum_t_value);
}
inline bool PLAYER_DIR_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PLAYER_DIR_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PLAYER_DIR_TYPE>(
    PLAYER_DIR_TYPE_descriptor(), name, value);
}
enum EnemyType : int {
  ENEMY_TYPE_NONE = 0,
  ENEMY_TYPE_HALF = 1,
  ENEMY_TYPE_WHITE = 2,
  EnemyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EnemyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EnemyType_IsValid(int value);
constexpr EnemyType EnemyType_MIN = ENEMY_TYPE_NONE;
constexpr EnemyType EnemyType_MAX = ENEMY_TYPE_WHITE;
constexpr int EnemyType_ARRAYSIZE = EnemyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnemyType_descriptor();
template<typename T>
inline const std::string& EnemyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnemyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnemyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnemyType_descriptor(), enum_t_value);
}
inline bool EnemyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EnemyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnemyType>(
    EnemyType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::PlayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PlayerType>() {
  return ::Protocol::PlayerType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::OBJECT_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::OBJECT_TYPE>() {
  return ::Protocol::OBJECT_TYPE_descriptor();
}
template <> struct is_proto_enum< ::Protocol::PLAYER_DIR_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PLAYER_DIR_TYPE>() {
  return ::Protocol::PLAYER_DIR_TYPE_descriptor();
}
template <> struct is_proto_enum< ::Protocol::EnemyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EnemyType>() {
  return ::Protocol::EnemyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
